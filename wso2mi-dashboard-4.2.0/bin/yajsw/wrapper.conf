# Tested with open jdk 11.05 & jdk 17.0.6 on yajsw-stable-13.05
#********************************************************************
# working directory
#********************************************************************
wrapper.working.dir=${wso2mi_dashboard_home}\\
# Java Main class.
# YAJSW: default is "org.rzo.yajsw.app.WrapperJVMMain"
# DO NOT SET THIS PROPERTY UNLESS YOU HAVE YOUR OWN IMPLEMENTATION
# wrapper.java.mainclass=
#********************************************************************
# tmp folder
# yajsw creates temporary files named in_.. out_.. err_.. jna..
# per default these are placed in jna.tmpdir.
# jna.tmpdir is set in setenv batch file to <yajsw>/tmp
#********************************************************************
wrapper.tmp.path = ${jna_tmpdir}
#********************************************************************
# Application main class or native executable
# One of the following properties MUST be defined
#********************************************************************
# Java Application main class
wrapper.java.app.mainclass=org.wso2.ei.dashboard.bootstrap.Bootstrap
# Log Level for console output.  (See docs for log levels)
wrapper.console.loglevel=INFO
# Log file to use for wrapper output logging.
wrapper.logfile=${wrapper_home}\/log\/wrapper.log
# Format of output for the log file.  (See docs for formats)
#wrapper.logfile.format=LPTM
# Log Level for log file output.  (See docs for log levels)
#wrapper.logfile.loglevel=INFO
# Maximum size that the log file will be allowed to grow to before
#  the log is rolled. Size is specified in bytes.  The default value
#  of 0, disables log rolling by size.  May abbreviate with the 'k' (kB) or
#  'm' (mB) suffix.  For example: 10m = 10 megabytes.
# If wrapper.logfile does not contain the string ROLLNUM it will be automatically added as suffix of the file name
wrapper.logfile.maxsize=10m
# Maximum number of rolled log files which will be allowed before old
#  files are deleted.  The default value of 0 implies no limit.
wrapper.logfile.maxfiles=10
# Title to use when running as a console
wrapper.console.title=WSO2 Micro Integrator Dashboard
#********************************************************************
# Wrapper Windows Service and Posix Daemon Properties
#********************************************************************
# Name of the service
wrapper.ntservice.name=WSO2MI_DASHBOARD
# Display name of the service
wrapper.ntservice.displayname=WSO2 Micro Integrator Dashboard 4.2.0
# Description of the service
wrapper.ntservice.description=Provides the ability to run WSO2 Micro Integrator Dashboard 4.2.0 as a Windows Service
#********************************************************************
# Wrapper System Tray Properties
#********************************************************************
# enable system tray
wrapper.tray = true
# TCP/IP port. If none is defined multicast discovery is used to find the port
# Set the port in case multicast is not possible.
wrapper.tray.port = 15002
#********************************************************************
# Exit Code Properties
# Restart on non zero exit code
#********************************************************************
wrapper.on_exit.0=SHUTDOWN
wrapper.on_exit.default=RESTART
#********************************************************************
# Trigger actions on console output
#********************************************************************
# On Exception show message in system tray
wrapper.filter.trigger.0=Exception
wrapper.filter.script.0=${wrapper_home}/scripts/trayMessage.gv
wrapper.filter.script.0.args=Exception
#********************************************************************
# genConfig: further Properties generated by genConfig
#********************************************************************
placeHolderSoGenPropsComeHere=
wrapper.java.command = java
wrapper.java.classpath.1 = ${wso2mi_dashboard_home}\\lib\\*.jar
wrapper.app.parameter.1 = org.wso2.ei.dashboard.bootstrap.Bootstrap
wrapper.app.parameter.2 = RUN
wrapper.java.additional.1 = -Xms256m
wrapper.java.additional.2 = -Xmx1024m
wrapper.java.additional.3 = -XX:+HeapDumpOnOutOfMemoryError
wrapper.java.additional.4 = -XX:HeapDumpPath=${wso2mi_dashboard_home}\\logs\\heap-dump.hprof
wrapper.java.additional.5 = -Dcom.sun.management.jmxremote
wrapper.java.additional.6 = -Dcarbon.registry.root=\/
wrapper.java.additional.7 = -Ddashboard.home=${wso2mi_dashboard_home}
wrapper.java.additional.8 = -Dwso2.server.standalone=true
wrapper.java.additional.9 = -Djava.command=${java_home}/bin/java
wrapper.java.additional.10 = -Dcarbon.config.dir.path=${wso2mi_dashboard_home}\\conf
wrapper.java.additional.11 = -Dcarbon.logs.path=${wso2mi_dashboard_home}\\logs
wrapper.java.additional.12 = -Dconf.location=${wso2mi_dashboard_home}\\conf
wrapper.java.additional.13 = -Dfile.encoding=UTF8
wrapper.java.additional.14 = -Dorg.wso2.ignoreHostnameVerification=true
wrapper.java.additional.15 = -Dlog4j.configurationFile=${wso2mi_dashboard_home}\\conf\\log4j2.properties
wrapper.java.additional.16 = -Dwso2.runtime.path=${wso2mi_dashboard_home}
